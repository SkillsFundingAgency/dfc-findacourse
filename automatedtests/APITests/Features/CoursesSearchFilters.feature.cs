// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace APITests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Course Directory Search Filters")]
    public partial class CourseDirectorySearchFiltersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CoursesSearchFilters.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Course Directory Search Filters", "\tFilter Course Directory Search results", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filter by Study Mode")]
        [NUnit.Framework.CategoryAttribute("APITests")]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "1", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "2", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "3", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "all", null)]
        public virtual void FilterByStudyMode(string coursename, string studymode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "APITests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter by Study Mode", null, @__tags);
#line 5
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
 testRunner.Given("I have an endpoint Live Course Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When(string.Format("I search and filter results by Study Mode {0} , {1}", coursename, studymode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then(string.Format("the result contains course {0}", coursename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filter by Attendance Mode")]
        [NUnit.Framework.CategoryAttribute("APITests")]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "1", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "2", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "3", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "all", null)]
        public virtual void FilterByAttendanceMode(string coursename, string attendancemode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "APITests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter by Attendance Mode", null, @__tags);
#line 19
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 20
 testRunner.Given("I have an endpoint Live Course Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When(string.Format("I search and filter results by Attendance Mode {0} , {1}", coursename, attendancemode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then(string.Format("the result contains course {0}", coursename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filter by Attendance Pattern")]
        [NUnit.Framework.CategoryAttribute("APITests")]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "1", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "2", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "3", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "all", null)]
        public virtual void FilterByAttendancePattern(string coursename, string attendancepattern, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "APITests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter by Attendance Pattern", null, @__tags);
#line 33
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 34
 testRunner.Given("I have an endpoint Live Course Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 35
 testRunner.When(string.Format("I search and filter results by Attendance Pattern {0} , {1}", coursename, attendancepattern), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
 testRunner.Then(string.Format("the result contains course {0}", coursename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filter by Qualification Level")]
        [NUnit.Framework.CategoryAttribute("APITests")]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "1", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "2", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "3", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "4", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "5", null)]
        [NUnit.Framework.TestCaseAttribute("CHEMISTRY", "6", null)]
        [NUnit.Framework.TestCaseAttribute("MANAGEMENT", "7", null)]
        [NUnit.Framework.TestCaseAttribute("TELECOMS", "8", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "0", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "all", null)]
        public virtual void FilterByQualificationLevel(string coursename, string level, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "APITests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter by Qualification Level", null, @__tags);
#line 47
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 48
 testRunner.Given("I have an endpoint Live Course Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
 testRunner.When(string.Format("I search and filter results by Qualification Level {0} , {1}", coursename, level), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
 testRunner.Then(string.Format("the result contains course {0}", coursename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filter by DFE Funded")]
        [NUnit.Framework.CategoryAttribute("APITests")]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "true", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "false", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "all", null)]
        public virtual void FilterByDFEFunded(string coursename, string dfefunded, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "APITests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter by DFE Funded", null, @__tags);
#line 67
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 68
 testRunner.Given("I have an endpoint Live Course Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 69
 testRunner.When(string.Format("I search and filter results by DFE Funded {0} , {1}", coursename, dfefunded), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then(string.Format("the result contains course {0}", coursename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
