// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace APITests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Course Directory Search")]
    public partial class CourseDirectorySearchFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CoursesSearchAPI.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Course Directory Search", "\tSearch the Course Directory", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search on Course Name Only")]
        [NUnit.Framework.CategoryAttribute("APITests")]
        [NUnit.Framework.TestCaseAttribute("maths", null)]
        [NUnit.Framework.TestCaseAttribute("History", null)]
        [NUnit.Framework.TestCaseAttribute("cybersecurity", null)]
        [NUnit.Framework.TestCaseAttribute("BIOLOGY", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", null)]
        public virtual void SearchOnCourseNameOnly(string coursename, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "APITests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search on Course Name Only", null, @__tags);
#line 5
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
 testRunner.Given("I have an endpoint Live Course Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When(string.Format("I search for course {0}", coursename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then(string.Format("the result contains course {0}", coursename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search on Invalid Course Name")]
        [NUnit.Framework.CategoryAttribute("APITests")]
        [NUnit.Framework.TestCaseAttribute("bbbbbbb", null)]
        [NUnit.Framework.TestCaseAttribute("@chemistry", null)]
        [NUnit.Framework.TestCaseAttribute("cyber*", null)]
        [NUnit.Framework.TestCaseAttribute("Chemistry!", null)]
        [NUnit.Framework.TestCaseAttribute("chemsitry;", null)]
        [NUnit.Framework.TestCaseAttribute("CHEMISTRY^", null)]
        [NUnit.Framework.TestCaseAttribute("{PLUMING}", null)]
        [NUnit.Framework.TestCaseAttribute("BRICK=LAYER", null)]
        [NUnit.Framework.TestCaseAttribute("hairbeuaty?", null)]
        [NUnit.Framework.TestCaseAttribute("Hair%", null)]
        [NUnit.Framework.TestCaseAttribute("[HairBeauty]", null)]
        [NUnit.Framework.TestCaseAttribute("A~LEVEL BIOLOGY", null)]
        [NUnit.Framework.TestCaseAttribute("hair_beauty", null)]
        public virtual void SearchOnInvalidCourseName(string coursename, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "APITests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search on Invalid Course Name", null, @__tags);
#line 19
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 20
 testRunner.Given("I have an endpoint Live Course Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When(string.Format("I search for course {0}", coursename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then(string.Format("the result do not contain course {0}", coursename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search on Course Name and Qualification Level")]
        [NUnit.Framework.CategoryAttribute("APITests")]
        [NUnit.Framework.TestCaseAttribute("biology", "3", null)]
        [NUnit.Framework.TestCaseAttribute("biology", "2", null)]
        [NUnit.Framework.TestCaseAttribute("english", "1", null)]
        [NUnit.Framework.TestCaseAttribute("english", "0", null)]
        [NUnit.Framework.TestCaseAttribute("engineering", "4", null)]
        [NUnit.Framework.TestCaseAttribute("engineering", "5", null)]
        [NUnit.Framework.TestCaseAttribute("Management", "7", null)]
        public virtual void SearchOnCourseNameAndQualificationLevel(string coursename, string level, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "APITests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search on Course Name and Qualification Level", null, @__tags);
#line 41
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 42
 testRunner.Given("I have an endpoint Live Course Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.When(string.Format("I search for courses with qaulification level {0} , {1}", coursename, level), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then(string.Format("the result contains course {0}", coursename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
 testRunner.Then(string.Format("the result contains course {0}", level), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search on Course Name and Postcode")]
        [NUnit.Framework.CategoryAttribute("APITests")]
        [NUnit.Framework.TestCaseAttribute("biology", "b13 9da", null)]
        public virtual void SearchOnCourseNameAndPostcode(string coursename, string postcode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "APITests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search on Course Name and Postcode", null, @__tags);
#line 59
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 60
 testRunner.Given("I have an endpoint Live Course Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
 testRunner.When(string.Format("I search for courses with postcode {0} , {1}", coursename, postcode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
 testRunner.Then(string.Format("the result contains course {0}", coursename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search on Course Name and Postcode with Distance")]
        [NUnit.Framework.CategoryAttribute("APITests")]
        [NUnit.Framework.TestCaseAttribute("esol", "b13 9da", "1", null)]
        [NUnit.Framework.TestCaseAttribute("english", "b13 9da", "3", null)]
        [NUnit.Framework.TestCaseAttribute("english", "b13 9da", "10", null)]
        [NUnit.Framework.TestCaseAttribute("english", "b13 9da", "15", null)]
        [NUnit.Framework.TestCaseAttribute("english", "b13 9da", "20", null)]
        [NUnit.Framework.TestCaseAttribute("english", "b13 9da", "1000", null)]
        public virtual void SearchOnCourseNameAndPostcodeWithDistance(string coursename, string postcode, string distance, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "APITests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search on Course Name and Postcode with Distance", null, @__tags);
#line 70
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 71
 testRunner.Given("I have an endpoint Live Course Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 72
 testRunner.When(string.Format("I search for courses with distance and postcode {0} , {1} , {2}", coursename, postcode, distance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
 testRunner.Then(string.Format("the result contains course {0}", coursename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search on Course Name and Qualification Level and Postcode")]
        [NUnit.Framework.CategoryAttribute("APITests")]
        [NUnit.Framework.TestCaseAttribute("english", "3", "b13 9da", null)]
        public virtual void SearchOnCourseNameAndQualificationLevelAndPostcode(string coursename, string level, string postcode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "APITests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search on Course Name and Qualification Level and Postcode", null, @__tags);
#line 86
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 87
 testRunner.Given("I have an endpoint Live Course Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 88
 testRunner.When(string.Format("I search for courses with level and postcode {0} , {1} , {2}", coursename, level, postcode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
 testRunner.Then(string.Format("the result contains course {0}", coursename), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 90
 testRunner.Then(string.Format("the result contains course {0}", level), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
